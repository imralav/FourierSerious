{"version":3,"sources":["series-params/SeriesParamsCollector.tsx","series-visualiser/SeriesVisualiser.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["SingleParam","props","className","type","value","radius","min","onChange","event","changeRadius","target","angleSpeed","changeAngleSpeed","SeriesParamsCollector","index","newParams","this","params","paramsUpdated","map","param","onClick","clearAllParams","React","Component","SeriesVisualiser","JSON","stringify","DEFAULT_PARAMS","App","state","setState","setParams","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SASA,SAASA,EAAYC,GACnB,OACE,sBAAKC,UAAU,uBAAf,UACE,2CAEE,uBACEC,KAAK,SACLC,MAAOH,EAAMI,OACbC,IAAI,KACJC,SAAU,SAACC,GAAD,OAAWP,EAAMQ,cAAcD,EAAME,OAAON,UAN1D,QAUA,gDAEE,uBACED,KAAK,SACLC,MAAOH,EAAMU,WACbJ,SAAU,SAACC,GAAD,OAAWP,EAAMW,kBAAkBJ,EAAME,OAAON,UAL9D,c,IAwBeS,E,kDAInB,WAAYZ,GAAoC,uCACxCA,G,oDAER,SAAiBa,EAAeV,GAC9B,IAAMW,EAAS,YAAOC,KAAKf,MAAMgB,QACjCF,EAAUD,GAAOH,WAAaP,EAC9BY,KAAKf,MAAMiB,cAAcH,K,0BAE3B,SAAaD,EAAeV,GAC1B,IAAMW,EAAS,YAAOC,KAAKf,MAAMgB,QACjCF,EAAUD,GAAOT,OAASD,EAC1BY,KAAKf,MAAMiB,cAAcH,K,oBAE3B,WAAU,IAAD,OACP,OACE,sBAAKb,UAAU,wBAAf,UACGc,KAAKf,MAAMgB,OAAOE,KAAI,SAACC,EAAON,GAAR,OACrB,cAACd,EAAD,CAEEK,OAAQe,EAAMf,OACdM,WAAYS,EAAMT,WAClBC,iBAAkB,SAACR,GAAD,OAAW,EAAKQ,iBAAiBE,EAAOV,IAC1DK,aAAc,SAACL,GAAD,OAAW,EAAKK,aAAaK,EAAOV,KAJ7CU,MAOT,wBAAQO,QAAS,kBAAM,EAAKpB,MAAMc,aAAlC,eACA,wBAAQM,QAAS,kBAAM,EAAKpB,MAAMqB,kBAAlC,8B,GA9B2CC,IAAMC,WC5C1C,SAASC,EAAiBxB,GAGvC,OACE,oDAEE,8BAAMyB,KAAKC,UAAU1B,EAAMgB,aCFjC,IAAMW,EAAiB,CAAEvB,OAAQ,IAAKM,WAAY,IAiCnCkB,E,kDA/Bb,WAAY5B,GAAY,IAAD,8BACrB,cAAMA,IACD6B,MAAQ,CACXb,OAAQ,CAAC,eAAKW,KAHK,E,6CAMvB,SAAUX,GACRD,KAAKe,SAAS,CAAEd,a,uBAElB,WACED,KAAKgB,UAAL,sBAAmBhB,KAAKc,MAAMb,QAA9B,gBAA2CW,Q,oBAE7C,WAAU,IAAD,OACP,OACE,iCACE,iCACE,cAAC,EAAD,CACEX,OAAQD,KAAKc,MAAMb,OACnBC,cAAe,SAACD,GAAD,OAAY,EAAKe,UAAUf,IAC1CF,UAAW,kBAAM,EAAKA,aACtBO,eAAgB,kBAAM,EAAKU,UAAU,CAAC,eAAKJ,UAG/C,kCACE,cAACH,EAAD,CAAkBR,OAAQD,KAAKc,MAAMb,kB,GAzB7BM,IAAMC,WCKTS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.74cd465d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FourierSeriesParams } from \"../series/fourier-series\";\r\nimport \"./SeriesParamsCollector.css\";\r\n\r\ntype FourierParamProps = FourierSeriesParams & {\r\n  changeRadius: (value: number) => void;\r\n  changeAngleSpeed: (value: number) => void;\r\n};\r\n\r\nfunction SingleParam(props: FourierParamProps) {\r\n  return (\r\n    <div className=\"fourier-series-param\">\r\n      <label>\r\n        Radius\r\n        <input\r\n          type=\"number\"\r\n          value={props.radius}\r\n          min=\"10\"\r\n          onChange={(event) => props.changeRadius(+event.target.value)}\r\n        />\r\n        px\r\n      </label>\r\n      <label>\r\n        Angle speed\r\n        <input\r\n          type=\"number\"\r\n          value={props.angleSpeed}\r\n          onChange={(event) => props.changeAngleSpeed(+event.target.value)}\r\n        />\r\n        deg/s\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\ntype SeriesParamsCollectorState = {\r\n  params: FourierParamProps[];\r\n};\r\n\r\ntype SeriesParamsCollectorProps = {\r\n  params: FourierSeriesParams[];\r\n  paramsUpdated: (params: FourierSeriesParams[]) => void;\r\n  newParams: () => void;\r\n  clearAllParams: () => void;\r\n};\r\n\r\nexport default class SeriesParamsCollector extends React.Component<\r\n  SeriesParamsCollectorProps,\r\n  SeriesParamsCollectorState\r\n> {\r\n  constructor(props: SeriesParamsCollectorProps) {\r\n    super(props);\r\n  }\r\n  changeAngleSpeed(index: number, value: number) {\r\n    const newParams = [...this.props.params];\r\n    newParams[index].angleSpeed = value;\r\n    this.props.paramsUpdated(newParams);\r\n  }\r\n  changeRadius(index: number, value: number) {\r\n    const newParams = [...this.props.params];\r\n    newParams[index].radius = value;\r\n    this.props.paramsUpdated(newParams);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"fourier-series-params\">\r\n        {this.props.params.map((param, index) => (\r\n          <SingleParam\r\n            key={index}\r\n            radius={param.radius}\r\n            angleSpeed={param.angleSpeed}\r\n            changeAngleSpeed={(value) => this.changeAngleSpeed(index, value)}\r\n            changeRadius={(value) => this.changeRadius(index, value)}\r\n          />\r\n        ))}\r\n        <button onClick={() => this.props.newParams()}>+</button>\r\n        <button onClick={() => this.props.clearAllParams()}>clear all</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { FourierSeriesParams } from \"../series/fourier-series\";\r\n\r\nexport default function SeriesVisualiser(props: {\r\n  params: FourierSeriesParams[];\r\n}) {\r\n  return (\r\n    <div>\r\n      canvas to draw on\r\n      <pre>{JSON.stringify(props.params)}</pre>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport SeriesParamsCollector from \"./series-params/SeriesParamsCollector\";\nimport SeriesVisualiser from \"./series-visualiser/SeriesVisualiser\";\nimport { FourierSeriesParams } from \"./series/fourier-series\";\n\nconst DEFAULT_PARAMS = { radius: 100, angleSpeed: 15 };\nclass App extends React.Component<{}, { params: FourierSeriesParams[] }> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      params: [{ ...DEFAULT_PARAMS }],\n    };\n  }\n  setParams(params: FourierSeriesParams[]) {\n    this.setState({ params });\n  }\n  newParams() {\n    this.setParams([...this.state.params, { ...DEFAULT_PARAMS }]);\n  }\n  render() {\n    return (\n      <main>\n        <header>\n          <SeriesParamsCollector\n            params={this.state.params}\n            paramsUpdated={(params) => this.setParams(params)}\n            newParams={() => this.newParams()}\n            clearAllParams={() => this.setParams([{ ...DEFAULT_PARAMS }])}\n          />\n        </header>\n        <section>\n          <SeriesVisualiser params={this.state.params} />\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}